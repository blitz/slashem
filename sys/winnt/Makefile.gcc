#       $Id$
#       Copyright (c) NetHack PC Development Team 1993-2001
#       Copyright (c) Karl Garrison 1999
#       Copyright (c) Slash'EM Development Team 1999-2003
#
#       Slash'EM 0.0.7 Makefile for MinGW 1.0 and above and Gtk+ 2.0 and above
#  
#       Win32 systems tested:
#				- Windows 2000 SP1
#
#       Win32 compilers tested:
#				- MinGW 2.0.0-3
#
#	Win32 libraries tested:
#				- glib 2.0.7-20021201
#				- gtk+ 2.0.9-20021201
#				- atk 1.0.3-20020821
#				- pango 1.0.5-20021201
#				- libintl 0.10.40-20020310
#				- libiconv 1.7
#				- pkgconfig 0.14
#
#       In addition to your C compiler,
#
#       if you want to change           you will need a
#       files with suffix               workalike for
#              .y                           yacc   (such as bison)
#              .l                           lex    (such as flex)
#
#
#       If you have any questions read the sys/winnt/Install.gcc file included 
#       with the distribution.
#
#       Note that compiling will fail under WinNT (including Win2k and XP) if
#       the command line gets too long (eg., your directory names are longer
#       than the default).

# Game Installation Variables
# NOTE: Make sure GAMEDIR exists before make is started.

GAME = slashem
# The GNU Make has a problem if you include a drive spec below (unfortunately).
GAMEDIR = \games\slam32d

#
# Directories
#

# These are for MinGW's GCC,  which gets confused by \ 
DDAT  = ../dat
DUTIL = ../util
DSRC  = ../src
DINCL = ../include
MW32GTK = /mingw32/gtk2

# Normal dos commands get confused by \\
DAT  = ..\dat
DOC  = ..\doc
INCL = ..\include
WSYS = ..\sys\winnt
SRC  = ..\src
SSHR = ..\sys\share
UTIL = ..\util
WTTY = ..\win\tty
WGTK = ..\win\gtk2
WSHR = ..\win\share
#
GNUDLL = $(MW32GTK)/lib

#
#  Executables.

CC    = gcc
LINK  = gcc
MAKEBIN  = mingw32-make

#
# The MinGW switch needed to specify Microsoft packing & alignment rules
# (use gcc --target-help if you're not sure)
MS_BITFIELDS = -mms-bitfields
# MS_BITFIELDS = -fnative-struct

# The copy, del and echo commands don't work from a makefile since they are
# internal shell commands rather than external utilities.  We can get around
# this by specifying an external utility that performs the same function like
# the cp and rm commands from Cygwin32, or xcopy for copy.  Another way to do
# it is to call the shell explicitly and use the /c option to run the built-in
# command.  All of these examples appear below.

#COPY = command.com /c copy
#COPY = cmd.exe /c copy	# Same as above, but for Windows NT
#COPY = xcopy		# MSDOS xcopy command (asks if target File or Dir)
#COPY = cp		# UNIX copy command
COPY = copy /y		# MSDOS copy command (gets confused by '+')
RCOPY = xcopy /y /s
#RCOPY = cp -r
#DEL = command.com /c del
#DEL = cmd.exe /c del	# Same as above, but for Windows NT
#DEL = rm -f 		# UNIX del command
DEL = del 		# MSDOS del command
#RDEL = deltree		# Win 95 recursive del command
RDEL = rd /s /q		# Win 2K recursive del command
#RDEL = rm -rf
# Echo is very sensitive to trailing spaces so comments should be avoided
# on the following lines, which define Win95, NT, UNIX and MS-DOS versions.
#ECHO = command.com /c echo
#ECHO = cmd.exe /c echo
#ECHO = echo.exe
ECHO = echo
#LS = ls -1		# ls.exe from djgpp distribution
LS = dir /l/b/-p	# DOS command WAC - disable pause for dos6
#LS = *dir /l/b/z	# 4DOS command - cuts through ALIASes

# if you have a uudecode program, add its name here
# otherwise leave blank
UUDECODE =

#
#  Yacc/Lex ... if you got 'em.
#
# If you have yacc/lex or a work-alike set YACC_LEX to Y
#
YACC_LEX = N

# If YACC_LEX is Y above, set the following to values appropriate for
# your tools.
#
YACC   = bison -y -o y_tab.c
LEX    = flex
# Win32 versions
#YTABC  = y.tab.c
#YTABH  = y.tab.h
#LEXYYC = lex.yy.c
# DJGPP bison/lex doesn't use LFN
YTABC  = y_tab.c
YTABH  = y_tab.h
LEXYYC = lexyy.c

#
# Uncomment the line below if you want to store all the level files,
# help files, etc. in a single library file.

USE_DLB = Y

# To build a binary without any graphics
# suitable for blind players,
# set SUPPRESS_GRAPHICS to Y
# (Note: binary will require ANSI.SYS driver or equivalent loaded)
# SUPPRESS_GRAPHICS = Y

#
# Uncomment the line below if you want to compile with the GTK windowsystem.
# You will also need to define GTK_GRAPHICS and GTK_V20 in config.h.

# USE_GTK = Y

#
# Uncomment the line below if you want to compile with the proxy system.
# You will also need to define PROXY_GRAPHICS in config.h.

# USE_PROXY = Y

#
# Uncomment USE_GTK, USE_PROXY and the line below if you want to build a
# proxified GTK interface.  You will also need to define GTK_PROXY in config.h.

# USE_PROXIFIED = Y

#
# Uncomment the line below if you want to compile with the internal malloc
# routines (used to test for memory leaks).
# You will also need to define MONITOR_HEAP and INTERNAL_MALLOC in config.h
#
# Warning: Doing this increases the risk of a non-recoverable game crash.

# USE_NHALLOC = Y


#############################################################################
#
# nothing below this line should have to be changed
#

#Do not uncomment this for 0.0.7
#SOUND = $(OBJ)\ntsound.o

GAMEFILE = $(GAMEDIR)\$(GAME).exe

# Changing this conditional block is not recommended
ifeq ($(USE_DLB),Y)
DLBFLG = -DDLB
else
DLBFLG =
endif

#
#  Flags.
#
ifeq ($(SUPPRESS_GRAPHICS),Y)
TERMLIB =
# Build NetHack suitable for blind players

# Debugging
#CFLAGS = -pg -c -I../include $(DLBFLG) -DSUPPRESS_GRAPHICS
#LFLAGS = -pg

CFLAGS = -c -O -I../include $(DLBFLG) -DSUPPRESS_GRAPHICS
LFLAGS =

else

# Debugging
#CFLAGS = -pg -c -I..\include $(DLBFLG) -DWIN32CON
#LFLAGS = -pg

#    Normal
CFLAGS = -c -O -I../include $(DLBFLG) -DWIN32CON
LFLAGS =
endif

# Select Windowing system(s) below
# GTK windowing system
#WINGTKCFLAGS=`pkg-config gtk+-2.0 --cflags`
WINGTKCFLAGS=-I$(MW32GTK)/include

# Set the WINSRC, WINOBJ, and WINLIB lines to correspond to your desired
# combination of windowing systems.  Also set windowing systems in config.h.
#
# files for a straight tty port using no native windowing system
WINTTYSRC = ../win/tty/getline.c ../win/tty/termcap.c ../win/tty/topl.c \
	../win/tty/wintty.c 
WINTTYOBJ = getline.o termcap.o topl.o wintty.o 
#
# files for a GTK 2.0 port
# (tile.c is included in the defn. for WINCSRC, below)
ifeq ($(USE_GTK),Y)
WINGTKSRC = ../win/gtk2/gtk.c ../win/gtk2/gtkgetlin.c ../win/gtk2/gtkstatus.c \
	../win/gtk2/gtkmenu.c ../win/gtk2/gtkyn.c ../win/gtk2/gtkextcmd.c \
	../win/gtk2/gtkmap.c ../win/gtk2/gtkmessage.c ../win/gtk2/gtkmisc.c \
	../win/gtk2/xshmmap.c ../win/gtk2/gtktile.c ../win/gtk2/gtkint.c \
	../win/gtk2/gtkext.c
WINGTKOBJ1 = gtk.o gtkgetlin.o gtkstatus.o gtkmenu.o gtkyn.o gtkextcmd.o \
	gtkmap.o gtkmessage.o gtkmisc.o xshmmap.o
WINGTKOBJ2 = gtktile.o gtkint.o gtkext.o
endif
#
# Files for a proxy interface.
ifeq ($(USE_PROXY),Y)
WINPROXYSRC = ../win/proxy/winproxy.c ../win/proxy/callback.c
WINPROXYOBJ = winproxy.o callback.o
endif
#
# Common files for proxy window interface and window servers.
PROXYCOMSRC = ../win/proxy/nhext.c ../win/proxy/nhxdr.c \
	../win/proxy/nhextxdr.c ../win/proxy/nhextio.c ../win/proxy/compxdr.c
PROXYCOMOBJ = nhext.o nhxdr.o nhextxdr.o nhextio.o compxdr.o
# Files for the proxy utility modules. These are provided for use with window
# ports that support the proxy interface. The GTK2 window interface needs
# these files regardless of whether proxy support is enabled or not.
PROXYUTLSRC = ../win/proxy/dlbh.c ../win/proxy/mapid.c \
	../win/proxy/riputil.c ../win/proxy/getopt.c ../win/proxy/glyphmap.c
PROXYUTLOBJ = dlbh.o mapid.o riputil.o getopt.o glyphmap.o
#
# Files for plug-in window interfaces. These are needed to support external
# window ports and provide the interface to the game executable.  Currently,
# only the GTK2 window interface supports plug-in window interfaces.
PROXYCLNTSRC = ../win/proxy/proxysvc.c ../win/proxy/proxycb.c \
	../win/proxy/prxymap.c ../win/proxy/prxychar.c ../win/proxy/prxytile.c \
	../win/proxy/prxyconn.c
PROXYCLNTOBJ = proxysvc.o proxycb.o prxymap.o prxychar.o prxytile.o prxyconn.o

WINSRC = $(WINTTYSRC)
WOBJ01 = $(WINTTYOBJ)
WOBJ02 =
WOBJ03 =
WOBJ04 =

ifeq ($(USE_GTK),Y)
WINSRC += $(WINGTKSRC)
WOBJ02 += $(WINGTKOBJ1)
WOBJ03 += $(WINGTKOBJ2)
ifneq ($(USE_PROXY),Y)
WINSRC += $(PROXYUTLSRC)
WOBJ04 += tile.o
WOBJ05 += $(PROXYUTLOBJ)
endif
CCOMPILE = $(CC) $(MS_BITFIELDS)
else
CCOMPILE = $(CC)
endif

ifeq ($(USE_PROXY),Y)
WINSRC += $(WINPROXYSRC) $(PROXYUTLSRC) $(PROXYCOMSRC)
WOBJ02 += $(WINPROXYOBJ)
WOBJ03 += $(PROXYCOMOBJ)
WOBJ04 += tile.o
WOBJ05 += $(PROXYUTLOBJ)
endif

ifeq ($(USE_PROXIFIED),Y)
WINSRC += $(PROXYCLNTSRC)
WOBJ04 += $(PROXYCLNTOBJ)
endif

WINOBJ = $(WOBJ01) $(WOBJ02) $(WOBJ03) $(WOBJ04) $(WOBJ05)

#
# The definition of WINLIB (below) must also be changed to match
# WINSRC & WINOBJ.
#

WINTTYLIB = 

# libraries for GTK
# WINGTKLIB = `pkg-config gtk+-2.0 --libs`
ifeq ($(USE_GTK),Y)
WINGTKLIB1 = $(MW32GTK)/lib/libgtk-win32-2.0.dll.a \
		$(MW32GTK)/lib/libgdk-win32-2.0.dll.a 
WINGTKLIB2 = $(MW32GTK)/lib/libglib-2.0.dll.a \
		$(MW32GTK)/lib/libgdk_pixbuf-2.0.dll.a
WINGTKLIB3 = $(MW32GTK)/lib/libgobject-2.0.dll.a \
		$(MW32GTK)/lib/libpango-1.0.dll.a
endif

ifeq ($(USE_PROXY),Y)
WINPROXYLIB = libwsock32.a
endif

WINLIB = $(WINTTYLIB)

ifeq ($(USE_GTK),Y)
WINLIB += $(WINGTKLIB1) $(WINGTKLIB2) $(WINGTKLIB3)
endif

ifeq ($(USE_PROXY),Y)
WINLIB += $(WINPROXYLIB)
endif

# Shareable (architecture independent) data files which are not candidates
# for inclusion in DLB libraries (ND). Port specific files per discussions
# in Install.GTK and Install.pxy
CNF_SHARE_GTKND = x11bigtiles x11big3dtiles x11tiles rip.xpm credit.xpm
CNF_SHARE_PROXYND = x11bigtiles.map x11big3dtiles.map x11tiles.map

ifeq ($(USE_GTK),Y)
CNF_SHARE_DATND += $(CNF_SHARE_GTKND)
endif

ifeq ($(USE_PROXY),Y)
CNF_SHARE_DATND += $(CNF_SHARE_PROXYND)
endif

#
#  Utility Objects.
#

ifeq ($(USE_NHALLOC),Y)
NHALLOCOBJ = nhalloc.o
NHALLOCDLL = nhalloc.dll
NHALLOCA = nhalloc.a
else
NHALLOCOBJ =
NHALLOCDLL =
NHALLOCA =
endif

MAKESRC	    = makedefs.c

SPLEVSRC    = lev_yacc.c  lev_$(LEX).c	 lev_main.c  panic.c

DGNCOMPSRC  = dgn_yacc.c  dgn_$(LEX).c	 dgn_main.c

MAKEOBJS    = makedefs.o  monst.o	 objects.o alloc.o panic.o $(NHALLOCOBJ)

SPLEVOBJS   = lev_yacc.o  lev_$(LEX).o	lev_main.o  alloc.o	\
		monst.o	    objects.o	    panic.o  \
		drawing.o	decl.o $(NHALLOCOBJ)

DGNCOMPOBJS = dgn_yacc.o  dgn_$(LEX).o	dgn_main.o  alloc.o	 \
		panic.o $(NHALLOCOBJ)

RECOVOBJS   = recover.o


#  Tile related object files.

ifeq ($(SUPPRESS_GRAPHICS),Y)
TILOBJ       =
TEXTIO       =
TEXTIO2      =
PLANAR_TIB   =
OVERVIEW_TIB =
TILEUTIL     = 
TILEFILES    = 
TILEFILES2   = 
GIFREADERS   = 
GIFREAD2     = 
PPMWRITERS   = 
PPMWRIT2     = 

else

TEXTIO      = tiletext.o tiletxt.o drawing.o decl.o monst.o objects.o \
              panic.o alloc.o $(NHALLOCOBJ)

TEXTIO2     = tiletex2.o tiletxt2.o drawing.o decl.o monst.o objects.o \
              panic.o alloc.o $(NHALLOCOBJ)


PLANAR_TIB  = NetHack1.tib

OVERVIEW_TIB = NetHacko.tib

DLBOBJ = dlb.o
endif


#  Object files for the game itself.

VOBJ01 = allmain.o  alloc.o    apply.o	  artifact.o attrib.o
VOBJ02 = ball.o	    bones.o    borg.o	  botl.o     cmd.o 	dbridge.o
VOBJ03 = decl.o	    detect.o   display.o  do.o	     do_name.o
VOBJ04 = do_wear.o  dog.o      dogmove.o  dokick.o   dothrow.o
VOBJ05 = drawing.o  dungeon.o  eat.o	  end.o	     engrave.o
VOBJ06 = exper.o    explode.o  extralev.o files.o    fountain.o
VOBJ07 = hack.o     hacklib.o  invent.o   lock.o
VOBJ08 = mail.o	    main.o     makemon.o  mcastu.o   mhitm.o
VOBJ09 = mhitu.o    minion.o   mkmap.o	  mklev.o    mkmaze.o
VOBJ10 = mkobj.o    mkroom.o   mon.o	  mondata.o  monmove.o
VOBJ11 = monst.o    monstr.o   mplayer.o  mthrowu.o  muse.o
VOBJ12 = music.o    o_init.o   objects.o  objnam.o   options.o
VOBJ13 = pickup.o   pline.o    polyself.o potion.o   quest.o
VOBJ14 = questpgr.o pager.o    pray.o	  priest.o   read.o
VOBJ15 = rect.o	    restore.o  rip.o	  rnd.o	     role.o
VOBJ16 = rumors.o   save.o	   shk.o      shknam.o	 sit.o
VOBJ17 = sounds.o   sp_lev.o   spell.o    steal.o	 steed.o
VOBJ18 = timeout.o  topten.o   track.o
VOBJ19 = trap.o     u_init.o   uhitm.o    vault.o    vision.o
VOBJ20 = vis_tab.o  weapon.o   were.o	  wield.o    windows.o
VOBJ21 = wizard.o   worm.o	  worn.o     write.o
VOBJ22 = zap.o	    light.o    dlb.o      dig.o      teleport.o
VOBJ23 = region.o   tech.o     gypsy.o    mapglyph.o

SOBJ   = winnt.o    sys.o      unix.o     nttty.o    random.o \
	 $(SOUND)   nhlan.o
#	 $(SOUND)   mapimail.o nhlan.o

VVOBJ  = version.o

VOBJ   = $(VOBJ01) $(VOBJ02) $(VOBJ03) $(VOBJ04) $(VOBJ05) \
	$(VOBJ06) $(VOBJ07) $(VOBJ08) $(VOBJ09) $(VOBJ10) \
	$(VOBJ11) $(VOBJ12) $(VOBJ13) $(VOBJ14) $(VOBJ15) \
	$(VOBJ16) $(VOBJ17) $(VOBJ18) $(VOBJ19) $(VOBJ20) \
	$(VOBJ21) $(VOBJ22) $(VOBJ23)

ALLOBJ = $(VOBJ) $(SOBJ) $(VVOBJ) $(WINOBJ)

#
#  Header Objects.
#

DGN_FILE_H = $(INCL)\align.h	$(INCL)\dgn_file.h
DUNGEON_H  = $(INCL)\align.h	$(INCL)\dungeon.h
EMIN_H	   = $(DUNGEON_H)	$(INCL)\emin.h
EPRI_H	   = $(DUNGEON_H)	$(INCL)\align.h	    $(INCL)\epri.h
ESHK_H	   = $(DUNGEON_H)	$(INCL)\eshk.h
MONDATA_H  = $(INCL)\align.h	$(INCL)\mondata.h
MONST_H	   = $(INCL)\align.h	$(INCL)\monst.h
NHLAN_H     = $(INCL)\nhlan.h
PERMONST_H = $(INCL)\monattk.h	$(INCL)\monflag.h   $(INCL)\align.h   \
	    $(INCL)\permonst.h
REGION_H   = $(INCL)\region.h
RM_H	   = $(INCL)\align.h	$(INCL)\rm.h
SKILLS_H   = $(INCL)\skills.h
SP_LEV_H   = $(INCL)\align.h	$(INCL)\sp_lev.h
VAULT_H	   = $(DUNGEON_H)	$(INCL)\vault.h
YOUPROP_H  = $(PERMONST_H)	$(MONDATA_H)	    $(INCL)\prop.h    \
	    $(INCL)\pm.h       $(INCL)\youprop.h
YOU_H	   = $(MONST_H)		$(YOUPROP_H)	    $(INCL)\align.h   \
	     $(INCL)\attrib.h	$(INCL)\you.h
DISPLAY_H  = $(MONDATA_H)	$(INCL)\vision.h    $(INCL)\display.h
NTCONF_H   = $(INCL)\micro.h	$(INCL)\system.h    $(INCL)\ntconf.h
CONFIG_H   = $(GLOBAL_H)	$(INCL)\tradstdc.h  $(INCL)\config1.h \
	    $(INCL)\config.h
DECL_H	   = $(YOU_H)		$(INCL)\spell.h	    $(INCL)\color.h   \
	     $(INCL)\obj.h	$(INCL)\onames.h    $(INCL)\pm.h      \
	      $(INCL)\decl.h
GLOBAL_H   = $(NTCONF_H)	$(INCL)\coord.h	    $(INCL)\global.h
HACK_H	   = $(CONFIG_H)	$(DUNGEON_H)	    $(DECL_H)	      \
	       $(DISPLAY_H)	  $(INCL)\monsym.h    $(INCL)\mkroom.h	\
	      $(INCL)\objclass.h $(INCL)\trap.h	     $(INCL)\flag.h    \
	      $(RM_H)		 $(INCL)\vision.h    $(INCL)\wintype.h \
	      $(INCL)\engrave.h	 $(INCL)\rect.h	  \
	       $(INCL)\trampoli.h $(INCL)\hack.h $(REGION_H)
DLB_H      = $(INCL)\dlb.h

#ifeq ($(SUPPRESS_GRAPHICS),Y)
#TILE_H     =
#else
#TILE_H	   = $(INCL)\tile.h $(INCL)\pctiles.h
#endif

ifeq ($(USE_DLB),Y)
DLB = $(DAT)\nhshare $(DAT)\nhushare
DLBOBJS = dlb_main.o dlb.o alloc.o panic.o $(NHALLOCOBJ)
else
DLB =
DLBOBJS =
endif

#
#  Make Rules.
#

.SUFFIXES:  .exe .o .c .y .l

.c.o:
	$(CCOMPILE) $(CFLAGS) -o$@ $<

#.phony: dlb

#
#  Primary Targets.
#

#  The default target.

default: $(GAMEFILE)

all: install.tag

util: utility.tag

install: install.tag

utility.tag: $(INCL)\date.h $(INCL)\trap.h    $(INCL)\onames.h	       \
	$(INCL)\pm.h	  monstr.c   vis_tab.c	$(INCL)\filename.h\
	lev_comp.exe	 dgn_comp.exe	 recover.exe $(TILEUTIL)
	$(ECHO) utilities made > utility.tag

install.tag: dat.tag $(GAMEFILE)
ifeq ($(USE_DLB),Y)
	$(COPY) $(DAT)\nhshare				$(GAMEDIR)
	$(COPY) $(DAT)\nhushare				$(GAMEDIR)
	$(COPY) $(DAT)\license				$(GAMEDIR)
else
	$(COPY) $(DAT)\*.				$(GAMEDIR)
	$(COPY) $(DAT)\*.dat				$(GAMEDIR)
	$(COPY) $(DAT)\*.lev				$(GAMEDIR)
#	$(DEL) $(GAMEDIR)\makefile.
endif
ifeq ($(USE_GTK),Y)
	$(COPY) $(subst /,\,$(WGTK)\GTKRC.w32		$(GAMEDIR)\gtkrc)
	$(COPY) $(subst /,\,rip.xpm			$(GAMEDIR))
	$(COPY) $(subst /,\,credit.xpm			$(GAMEDIR))
	$(COPY) $(subst /,\,x11tiles			$(GAMEDIR))
	$(COPY) $(subst /,\,x11bigtiles			$(GAMEDIR))
	$(COPY) $(subst /,\,x11big3dtiles		$(GAMEDIR))
	$(COPY) $(subst /,\,$(GNUDLL)\\libglib*.dll	$(GAMEDIR))
	$(COPY) $(subst /,\,$(GNUDLL)\\iconv*.dll	$(GAMEDIR))
	$(COPY) $(subst /,\,$(GNUDLL)\\libgdk*.dll	$(GAMEDIR))
	$(COPY) $(subst /,\,$(GNUDLL)\\libgtk*.dll	$(GAMEDIR))
	$(COPY) $(subst /,\,$(GNUDLL)\\libgmodule*.dll	$(GAMEDIR))
	$(COPY) $(subst /,\,$(GNUDLL)\\libintl*.dll	$(GAMEDIR))
	$(COPY) $(subst /,\,$(GNUDLL)\\libpango*.dll	$(GAMEDIR))
	$(COPY) $(subst /,\,$(GNUDLL)\\libatk*.dll	$(GAMEDIR))
	$(COPY) $(subst /,\,$(GNUDLL)\\libgobject*.dll	$(GAMEDIR))
	mkdir $(subst /,\,$(GAMEDIR)\etc)
	$(RCOPY) $(subst /,\,$(MW32GTK)\etc		$(GAMEDIR)\etc)
	-$(RDEL) $(subst /,\,$(GAMEDIR)\lib)
	mkdir $(subst /,\,$(GAMEDIR)\lib)
	mkdir $(subst /,\,$(GAMEDIR)\lib\pango)
	$(RCOPY) $(subst /,\,$(MW32GTK)\lib\pango	$(GAMEDIR)\lib\pango)
	mkdir $(subst /,\,$(GAMEDIR)\lib\glib-2.0)
	$(RCOPY) $(subst /,\,$(MW32GTK)\lib\glib-2.0	$(GAMEDIR)\lib\glib-2.0)
	mkdir $(subst /,\,$(GAMEDIR)\lib\gtk-2.0)
	$(RCOPY) $(subst /,\,$(MW32GTK)\lib\gtk-2.0	$(GAMEDIR)\lib\gtk-2.0)
	$(COPY) $(subst /,\,$(WSYS)\winnt.cnf		$(GAMEDIR)\defaults.nh)
else
	$(COPY) $(subst /,\,$(SSHR)\NetHack.cnf		$(GAMEDIR)\defaults.nh)
endif
ifeq ($(USE_PROXY),Y)
	$(COPY) $(subst /,\,x11tiles.map		$(GAMEDIR))
	$(COPY) $(subst /,\,x11bigtiles.map		$(GAMEDIR))
	$(COPY) $(subst /,\,x11big3dtiles.map		$(GAMEDIR))
endif
ifeq ($(USE_NHALLOC),Y)
	$(COPY) $(subst /,\,nhalloc.dll			$(GAMEDIR))
endif
	$(COPY) $(subst /,\,recover.exe			$(GAMEDIR))
	$(COPY) $(subst /,\,$(DOC)\guidebook.txt	$(GAMEDIR))
	$(COPY) $(subst /,\,$(DOC)\recover.txt		$(GAMEDIR))
	$(COPY) $(subst /,\,$(DOC)\slashem.txt		$(GAMEDIR))
	$(ECHO) install done > install.tag

#  The main target.


$(GAMEFILE): utility.tag $(NHALLOCDLL) $(NHALLOCA) $(ALLOBJ) $(GAME).lnk
	$(LINK) $(LFLAGS) $(GTKGCCFLAGS) -o$(GAME).exe $(GAME).lnk
	$(COPY) $(GAME).exe $(GAMEFILE)
	$(DEL) $(GAME).exe

$(GAME).lnk: $(ALLOBJ)
	@echo INPUT( $(VOBJ01) )> $@
	@echo INPUT( $(VOBJ02) )>> $@
	@echo INPUT( $(VOBJ03) )>> $@
	@echo INPUT( $(VOBJ04) )>> $@
	@echo INPUT( $(VOBJ05) )>> $@
	@echo INPUT( $(VOBJ06) )>> $@
	@echo INPUT( $(VOBJ07) )>> $@
	@echo INPUT( $(VOBJ08) )>> $@
	@echo INPUT( $(VOBJ09) )>> $@
	@echo INPUT( $(VOBJ10) )>> $@
	@echo INPUT( $(VOBJ11) )>> $@
	@echo INPUT( $(VOBJ12) )>> $@
	@echo INPUT( $(VOBJ13) )>> $@
	@echo INPUT( $(VOBJ14) )>> $@
	@echo INPUT( $(VOBJ15) )>> $@
	@echo INPUT( $(VOBJ16) )>> $@
	@echo INPUT( $(VOBJ17) )>> $@
	@echo INPUT( $(VOBJ18) )>> $@
	@echo INPUT( $(VOBJ19) )>> $@
	@echo INPUT( $(VOBJ20) )>> $@
	@echo INPUT( $(VOBJ21) )>> $@
	@echo INPUT( $(VOBJ22) )>> $@
	@echo INPUT( $(VOBJ23) )>> $@
	@echo INPUT( $(SOBJ)   )>> $@
	@echo INPUT( $(VVOBJ)  )>> $@
	@echo INPUT( $(WOBJ01) )>> $@
ifneq ($(WOBJ02),)
	@echo INPUT( $(WOBJ02) )>> $@
endif
ifneq ($(WOBJ03),)
	@echo INPUT( $(WOBJ03) )>> $@
endif
ifneq ($(WOBJ04),)
	@echo INPUT( $(WOBJ04) )>> $@
endif
ifneq ($(WOBJ05),)
	@echo INPUT( $(WOBJ05) )>> $@
endif
ifneq ($(WINLIB),)
	@echo INPUT( $(WINLIB) )>> $@
endif
ifeq ($(USE_NHALLOC),Y)
	@echo INPUT( nhalloc.a )>> $@
endif

#
#  Housekeeping.
#

clean:
	-$(DEL) *.o
	-$(DEL) *.map
	-$(DEL) nhalloc.*
	-$(DEL) dlb_main.exe

spotless: clean
	-$(DEL) utility.tag
	-$(DEL) install.tag
	-$(DEL) dat.tag
	-$(DEL) $(GAME).lnk
	-$(DEL) makedefs.exe
	-$(DEL) lev_comp.exe
	-$(DEL) dgn_comp.exe
	-$(DEL) txtmerge.exe
	-$(DEL) magtile.exe
	-$(DEL) bigtile.exe
	-$(DEL) txtbg.exe
	-$(DEL) mapmerge.exe
	-$(DEL) tile2x11.exe
	-$(DEL) x11bigtiles
	-$(DEL) x11big3dtiles
	-$(DEL) x11tiles
	-$(DEL) x11bigtiles.map
	-$(DEL) x11big3dtiles.map
	-$(DEL) x11tiles.map
	-$(DEL) gtkrc
	-$(DEL) *.xpm
	-$(DEL) tiletext.c
	-$(DEL) txtmerge.c
	-$(DEL) magtile.c
	-$(DEL) lev_flex.c
	-$(DEL) lev_yacc.c
	-$(DEL) dgn_flex.c
	-$(DEL) dgn_yacc.c
	-$(DEL) recover.exe
	-$(DEL) $(INCL)\onames.h
	-$(DEL) $(INCL)\pm.h
	-$(DEL) $(INCL)\vis_tab.h
	-$(DEL) $(INCL)\pcvideo.h
	-$(DEL) $(INCL)\pctiles.h
	-$(DEL) $(INCL)\portio.h
	-$(DEL) $(INCL)\tile.h
	-$(DEL) monstr.c
	-$(DEL) vis_tab.c
	-$(DEL) $(SRC)\panic.c
	-$(DEL) $(SRC)\makedefs.c
	-$(DEL) $(SRC)\recover.c
	-$(DEL) $(SRC)\lev_main.c
	-$(DEL) $(SRC)\dlb_main.c
	-$(DEL) $(SRC)\dgn_main.c
	-$(DEL) $(SRC)\wintty.c
	-$(DEL) $(SRC)\topl.c
	-$(DEL) $(SRC)\getline.c
	-$(DEL) $(SRC)\termcap.c
	-$(DEL) $(SRC)\tile2bin.c
	-$(DEL) $(SRC)\msdos.c
	-$(DEL) $(SRC)\pckeys.c
	-$(DEL) $(SRC)\video.c
	-$(DEL) $(SRC)\sound.c
	-$(DEL) $(SRC)\tilemap.c
	-$(DEL) $(SRC)\gifread.c
	-$(DEL) $(SRC)\ppmwrite.c
	-$(DEL) $(SRC)\pcmain.c
	-$(DEL) $(SRC)\pcunix.c
	-$(DEL) $(SRC)\pcsys.c
	-$(DEL) $(SRC)\tile.c
	-$(DEL) $(SRC)\gtk*.c
	-$(DEL) $(SRC)\xshmmap.c
	-$(DEL) $(SRC)\xshm.c
	-$(DEL) $(INCL)\date.h
	-$(DEL) $(INCL)\onames.h
	-$(DEL) $(INCL)\pm.h
	-$(DEL) $(INCL)\vis_tab.h
	-$(DEL) $(SRC)\nhlan.c
	-$(DEL) $(SRC)\winnt.c
	-$(DEL) $(SRC)\nttty.c
	-$(DEL) $(SRC)\ntsound.c
	-$(DEL) $(SRC)\mapimail.c
	-$(DEL) vis_tab.c
	-$(DEL) random.c
	-$(DEL) nhlan.c
	-$(DEL) *.lnk
	-$(DEL) *.def
	-$(DEL) *.map
	-$(DEL) *.lev
	-$(DEL) a.out
	-$(DEL) tilemap.exe
	-$(DEL) tile2bin.exe
	-$(DEL) $(DAT)\data
	-$(DEL) $(DAT)\*.lev
	-$(DEL) $(DAT)\data
	-$(DEL) $(DAT)\dungeon
	-$(DEL) $(DAT)\ttyoptions
	-$(DEL) $(DAT)\guioptions
	-$(DEL) $(DAT)\oracles
	-$(DEL) $(DAT)\rumors
	-$(DEL) $(DAT)\quest.dat
	-$(DEL) $(DAT)\nhshare
	-$(DEL) $(DAT)\nhushare
	-$(DEL) $(DAT)\dlb.lst
	-$(DEL) $(DAT)\msdoshlp.txt
	-$(DEL) $(DAT)\dlb_main.exe
	-$(DEL) $(DAT)\lev_comp.exe
	-$(DEL) $(DAT)\dgn_comp.exe
	-$(DEL) sp_lev.tag
	-$(DEL) $(PLANAR_TIB)
	-$(DEL) $(OVERVIEW_TIB)
	-$(DEL) pet_mark.xbm
	-$(DEL) rip.xpm
	-$(DEL) mapbg.xpm
	-$(DEL) $(WSHR)\monmag.txt
	-$(DEL) $(WSHR)\mon32.txt
	-$(DEL) $(WSHR)\objmag.txt 
	-$(DEL) $(WSHR)\obj32.txt
	-$(DEL) $(WSHR)\othmag.txt
	-$(DEL) $(WSHR)\oth32.txt
	-$(DEL) $(WSHR)\monbig.txt
	-$(DEL) $(WSHR)\mon3d.txt
	-$(DEL) $(WSHR)\objbig.txt
	-$(DEL) $(WSHR)\obj3d.txt
	-$(DEL) $(WSHR)\othbig.txt
	-$(DEL) $(WSHR)\oth3d.txt
	-$(DEL) $(WSHR)\mon32-t.txt
	-$(DEL) $(WSHR)\obj32-t.txt
	-$(DEL) $(WSHR)\oth32-t.txt

#
#  Secondary Targets.
#
#  The following include files depend on makedefs to be created.
#
#  date.h should be remade every time any of the source or include
#  files is modified.


$(INCL)\date.h : makedefs.exe
	-makedefs -v

$(INCL)\onames.h: makedefs.exe
	-makedefs -o

$(INCL)\pm.h: makedefs.exe
	-makedefs -p

monstr.c: makedefs.exe
	-makedefs -m

$(INCL)\vis_tab.h: makedefs.exe
	-makedefs -z

vis_tab.c: makedefs.exe
	-makedefs -z

$(INCL)\filename.h: makedefs.exe
	-makedefs -f

nhalloc.o:	$(CONFIG_H) alloc.c
	$(CCOMPILE) $(CFLAGS) -DNHALLOC_DLL -onhalloc.o alloc.c

nhalloc.def:
	@echo EXPORTS > nhalloc.def
	@echo malloc >> nhalloc.def
	@echo calloc >> nhalloc.def
	@echo realloc >> nhalloc.def
	@echo free >> nhalloc.def
	@echo monitor_heap_push >> nhalloc.def
	@echo monitor_heap_pop >> nhalloc.def
	@echo monitor_heap_set_subid >> nhalloc.def
	@echo monitor_heap_getmem >> nhalloc.def
	@echo monitor_heap_trace >> nhalloc.def
	@echo monitor_heap_mark >> nhalloc.def
	@echo monitor_heap_release >> nhalloc.def

nhalloc.dll:	nhalloc.def nhalloc.o panic.o
	$(CCOMPILE) -mdll -o junk.tmp -Wl,--base-file,base.tmp nhalloc.o panic.o
	$(DEL) junk.tmp
	dlltool --dllname nhalloc.dll --base-file base.tmp --output-exp nhalloc.exp --def nhalloc.def
	$(DEL) base.tmp
	$(CCOMPILE) -mdll -o nhalloc.dll nhalloc.o panic.o -Wl,nhalloc.exp
	$(DEL) nhalloc.exp

nhalloc.a:	nhalloc.def
	dlltool --dllname nhalloc.dll --def nhalloc.def --output-lib nhalloc.a -k

nhproxy.a:	$(PROXYCLNTOBJ) $(PROXYCOMOBJ)
	-$(DEL) nhproxy.a
	ar rc nhproxy.a $(PROXYCLNTOBJ)
	ar r nhproxy.a $(PROXYCOMOBJ)
	ranlib nhproxy.a

#
#  Makedefs Stuff
#

makedefs.exe:  $(MAKEOBJS)
	$(LINK) $(LFLAGS) -omakedefs.exe $(MAKEOBJS)

makedefs.c: $(UTIL)\makedefs.c
	$(COPY) $(UTIL)\makedefs.c .

makedefs.o:  $(CONFIG_H)	$(PERMONST_H)	   $(INCL)\objclass.h \
		$(INCL)\monsym.h   $(INCL)\qtext.h makedefs.c

#
#  Level Compiler Dependencies
#

lev_comp.exe:  $(SPLEVOBJS)
	@echo INPUT( $(SPLEVOBJS) )> tmp.lnk
	$(LINK) $(LFLAGS) $(GTKGCCFLAGS) -olev_comp.exe tmp.lnk
	@$(DEL) tmp.lnk

ifeq ($(YACC_LEX),Y)

lev_yacc.o:  $(HACK_H)	 $(SP_LEV_H)	lev_yacc.c
	$(CCOMPILE) $(CFLAGS) -o$@ lev_yacc.c

else

lev_yacc.o:  $(HACK_H)	 $(SP_LEV_H) $(INCL)\lev_comp.h lev_yacc.c
	$(CCOMPILE) $(CFLAGS) -o$@ lev_yacc.c

endif

lev_$(LEX).o:  $(HACK_H)   $(SP_LEV_H)	  $(INCL)\lev_comp.h \
	lev_$(LEX).c
	$(CCOMPILE) $(CFLAGS) -o$@ lev_$(LEX).c

lev_main.c:  $(UTIL)\lev_main.c
	$(COPY) $(UTIL)\lev_main.c .

lev_main.o:  $(HACK_H) lev_main.c

$(INCL)\lev_comp.h: lev_yacc.c

ifeq ($(YACC_LEX),Y)

lev_yacc.c:  $(UTIL)\lev_comp.y
	$(YACC) -d $(DUTIL)/lev_comp.y
	$(COPY) $(YTABC) $@
	$(COPY) $(YTABH) $(INCL)\lev_comp.h
	$(DEL) $(YTABC)
	$(DEL) $(YTABH)

lev_$(LEX).c:  $(UTIL)\lev_comp.l
	$(LEX) $(DUTIL)/lev_comp.l
	$(COPY) $(LEXYYC) $@
	$(DEL) $(LEXYYC)
else

lev_yacc.c: $(SSHR)\lev_yacc.c
	$(COPY) $(SSHR)\lev_yacc.c $@

$(INCL)\lev_comp.h: $(SSHR)\lev_comp.h
	$(COPY) $(SSHR)\lev_comp.h $@
	$(ECHO) /**/ >>$(DINCL)\lev_comp.h

lev_$(LEX).c: $(SSHR)\lev_lex.c
	$(COPY) $(SSHR)\lev_lex.c $@

endif



#
#  Dungeon Dependencies
#

dgn_comp.exe:  $(DGNCOMPOBJS)
	@echo INPUT( $(DGNCOMPOBJS) )> tmp.lnk
	$(LINK) $(LFLAGS) $(GTKGCCFLAGS) -odgn_comp.exe tmp.lnk
	@$(DEL) tmp.lnk

ifeq ($(YACC_LEX),Y)

dgn_yacc.o:  $(HACK_H)	 $(DGN_FILE_H)	dgn_yacc.c
	$(CCOMPILE) $(CFLAGS) -o$@ dgn_yacc.c

else

dgn_yacc.o:  $(HACK_H)	 $(DGN_FILE_H)	$(INCL)\dgn_comp.h dgn_yacc.c
	$(CCOMPILE) $(CFLAGS) -o$@ dgn_yacc.c

endif

dgn_$(LEX).o:  $(HACK_H)   $(DGN_FILE_H)  $(INCL)\dgn_comp.h \
	dgn_$(LEX).c
	$(CCOMPILE) $(CFLAGS) -o$@ dgn_$(LEX).c

dgn_main.c:  $(UTIL)\dgn_main.c
	$(COPY) $(UTIL)\dgn_main.c .

dgn_main.o:  $(HACK_H)

$(INCL)\dgn_comp.h:  dgn_yacc.c

ifeq ($(YACC_LEX),Y)

dgn_yacc.c: $(UTIL)\dgn_comp.y
	$(YACC) -d $(DUTIL)/dgn_comp.y
	$(COPY) $(YTABC) $@
	$(COPY) $(YTABH) $(INCL)\dgn_comp.h
	$(DEL) $(YTABC)
	$(DEL) $(YTABH)

dgn_$(LEX).c:  $(UTIL)\dgn_comp.l
	$(LEX) $(DUTIL)/dgn_comp.l
	$(COPY) $(LEXYYC) $@
	$(DEL) $(LEXYYC)

else

dgn_yacc.c: $(SSHR)\dgn_yacc.c
	$(COPY) $(SSHR)\dgn_yacc.c $@

$(INCL)\dgn_comp.h: $(SSHR)\dgn_comp.h
	$(COPY) $(SSHR)\dgn_comp.h $@
	$(ECHO) /**/ >>$(DINCL)\dgn_comp.h

dgn_$(LEX).c: $(SSHR)\dgn_lex.c
	$(COPY) $(SSHR)\dgn_lex.c $@
 
endif

#
#  Recover Utility
#

recover.exe:   $(RECOVOBJS)
	$(LINK) $(LFLAGS) -orecover.exe recover.o

recover.c:  $(UTIL)\recover.c
	$(COPY) $(UTIL)\recover.c .

recover.o:   $(CONFIG_H) recover.c
	$(CCOMPILE) $(CFLAGS) -o$@ recover.c

#
#  Tiles
#

#  Headers

$(INCL)\tile.h: $(WSHR)\tile.h tilemap.exe
	tilemap.exe

#  Utilities

$(WSHR)\txtmerge.exe: txtmerge.o $(TEXTIO)
	@echo INPUT( txtmerge.o )> tmp.lnk
	@echo INPUT( $(TEXTIO) )>> tmp.lnk
	$(LINK) $(LFLAGS) $(GTKGCCFLAGS) -o$(WSHR)\txtmerge.exe tmp.lnk
	@$(DEL) tmp.lnk

tile2x11.exe: tile2x11.o $(TEXTIO)
	@echo INPUT( tile2x11.o )> tmp.lnk
	@echo INPUT( $(TEXTIO) )>> tmp.lnk
	$(LINK) $(LFLAGS) $(GTKGCCFLAGS) -otile2x11.exe tmp.lnk
	@$(DEL) tmp.lnk

magtile.exe: magtile.o $(TEXTIO)
	@echo INPUT( magtile.o )> tmp.lnk
	@echo INPUT( $(TEXTIO) )>> tmp.lnk
	$(LINK) $(LFLAGS) $(GTKGCCFLAGS) -omagtile.exe tmp.lnk
	@$(DEL) tmp.lnk

bigtile.exe: bigtile.o $(TEXTIO)
	@echo INPUT( bigtile.o )> tmp.lnk
	@echo INPUT( $(TEXTIO) )>> tmp.lnk
	$(LINK) $(LFLAGS) $(GTKGCCFLAGS) -obigtile.exe tmp.lnk
	@$(DEL) tmp.lnk

txtbg.exe: txtbg.o $(TEXTIO)
	@echo INPUT( txtbg.o )> tmp.lnk
	@echo INPUT( $(TEXTIO) )>> tmp.lnk
	$(LINK) $(LFLAGS) $(GTKGCCFLAGS) -otxtbg.exe tmp.lnk
	@$(DEL) tmp.lnk

mapmerge.exe: mapmerge.o
	$(CCOMPILE) $(LFLAGS) -omapmerge.exe mapmerge.o

tile.c: tilemap.exe
	tilemap.exe
	@echo A new $@ has been created

tilemap.exe: tilemap.o
	$(CCOMPILE) $(LFLAGS) -otilemap.exe tilemap.o

tilemap.c: $(WSHR)\tilemap.c
	copy $(WSHR)\tilemap.c .

tilemap.o: $(WSHR)\tilemap.c $(HACK_H)
	$(CCOMPILE) $(CFLAGS) -c ../win/share/tilemap.c


magtile.o: $(WSHR)\magtile.c $(INCL)\config.h $(INCL)\tile.h
	$(CCOMPILE) $(CFLAGS) -c $(WSHR)\magtile.c

bigtile.o: $(WSHR)\bigtile.c $(INCL)\config.h $(INCL)\tile.h
	$(CCOMPILE) $(CFLAGS) -c $(WSHR)\bigtile.c

txtbg.o: $(WSHR)\txtbg.c $(INCL)\config.h $(INCL)\tile.h
	$(CCOMPILE) $(CFLAGS) -c $(WSHR)\txtbg.c

mapmerge.o: $(WSHR)\mapmerge.c $(HACK_H)
	$(CCOMPILE) $(CFLAGS) -c $(WSHR)\mapmerge.c

txtmerge.o: $(WSHR)\txtmerge.c $(INCL)\config.h $(INCL)\tile.h
	$(CCOMPILE) $(CFLAGS) -c ../win/share/txtmerge.c

tile2x11.o: ../win/X11/tile2x11.c $(INCL)\hack.h $(INCL)\tile.h \
						$(INCL)\tile2x11.h
	$(CCOMPILE) $(CFLAGS) -c ../win/X11/tile2x11.c


x11tiles: tile2x11.exe ../win/share/monsters.txt ../win/share/objects.txt \
				../win/share/other.txt
	tile2x11 -o x11tiles $(WSHR)\monsters.txt $(WSHR)\objects.txt \
		$(WSHR)\other.txt

x11tiles.map: mapmerge.exe ../win/share/monsters.map ../win/share/objects.map \
				../win/share/other.map
	mapmerge x11tiles.map $(WSHR)\monsters.map $(WSHR)\objects.map \
		$(WSHR)\other.map

x11bigtiles:	tile2x11.exe ../win/share/mon32.txt \
		../win/share/obj32.txt ../win/share/oth32.txt
	tile2x11 -o x11bigtiles $(WSHR)\mon32.txt $(WSHR)\obj32.txt \
		$(WSHR)\oth32.txt

x11bigtiles.map:	x11tiles.map
	$(COPY) x11tiles.map x11bigtiles.map

x11big3dtiles:	tile2x11.exe ../win/share/mon3d.txt \
		../win/share/obj3d.txt ../win/share/oth3d.txt
	tile2x11 -o x11big3dtiles $(WSHR)\mon3d.txt $(WSHR)\obj3d.txt \
		$(WSHR)\oth3d.txt

x11big3dtiles.map:	x11tiles.map
	$(COPY) x11tiles.map x11big3dtiles.map

$(WSHR)\monmag.txt:	magtile.exe ../win/share/monsters.txt
	magtile

$(WSHR)\objmag.txt:	magtile.exe ../win/share/objects.txt
	magtile

$(WSHR)\othmag.txt:	magtile.exe ../win/share/other.txt
	magtile

$(WSHR)\monbig.txt:	bigtile.exe ../win/share/mon32-t.txt \
				../win/share/obj32-t.txt \
				../win/share/oth32-t.txt
	bigtile

$(WSHR)\objbig.txt:	bigtile.exe ../win/share/mon32-t.txt \
				../win/share/obj32-t.txt \
				../win/share/oth32-t.txt
	bigtile

$(WSHR)\othbig.txt:	bigtile.exe ../win/share/mon32-t.txt \
				../win/share/obj32-t.txt \
				../win/share/oth32-t.txt
	bigtile

../win/share/mon32.txt:	txtbg.exe ../win/share/mon32-t.txt
	txtbg ../win/share/mon32-t.txt ../win/share/mon32.txt

../win/share/obj32.txt:	txtbg.exe ../win/share/obj32-t.txt
	txtbg ../win/share/obj32-t.txt ../win/share/obj32.txt

../win/share/oth32.txt:	txtbg.exe ../win/share/oth32-t.txt
	txtbg ../win/share/oth32-t.txt ../win/share/oth32.txt

../win/share/mon32-t.txt:	$(WSHR)\txtmerge.exe $(WSHR)\monmag.txt \
		$(WSHR)\mon32mi.txt $(WSHR)\mon32alg.txt \
		$(WSHR)\mon32aw.txt 
	cd $(WSHR) & \
	txtmerge mon32-t.txt monmag.txt -b mon32mi.txt -bff00ff mon32alg.txt & \
	txtmerge mon32-t.txt mon32-t.txt -bff00ff mon32aw.txt & \
	cd ..\$(SRC)

../win/share/obj32-t.txt:	$(WSHR)\txtmerge.exe $(WSHR)\objmag.txt \
		$(WSHR)\obj32mi.txt $(WSHR)\obj32se.txt \
		$(WSHR)\obj32alg.txt
	cd $(WSHR) & \
	txtmerge obj32-t.txt objmag.txt -b obj32mi.txt -b obj32se.txt & \
	txtmerge obj32-t.txt obj32-t.txt -bff00ff obj32alg.txt & \
	cd ..\$(SRC)

../win/share/oth32-t.txt:	$(WSHR)\txtmerge.exe $(WSHR)\othmag.txt \
		$(WSHR)\oth32mi.txt $(WSHR)\oth32se.txt \
		$(WSHR)\oth32alg.txt
	cd $(WSHR) & \
	txtmerge oth32-t.txt othmag.txt -b oth32mi.txt -b oth32se.txt & \
	txtmerge oth32-t.txt oth32-t.txt -bff00ff oth32alg.txt & \
	cd ..\$(SRC)

../win/share/mon3d.txt:	$(WSHR)\txtmerge.exe $(WSHR)\monbig.txt \
		$(WSHR)\mon3dmi.txt
	cd $(WSHR) & \
	txtmerge mon3d.txt monbig.txt -b mon3dmi.txt & \
	cd ..\$(SRC)

../win/share/obj3d.txt:	$(WSHR)\txtmerge.exe $(WSHR)\objbig.txt
	$(COPY) $(WSHR)\objbig.txt $(WSHR)\obj3d.txt

../win/share/oth3d.txt:	$(WSHR)\txtmerge.exe $(WSHR)\othbig.txt \
		$(WSHR)\oth3dmi.txt $(WSHR)\oth-2kmi.txt \
		$(WSHR)\oth3dse.txt
	cd $(WSHR) & \
	txtmerge oth3d.txt othbig.txt -b oth3dmi.txt -b oth-2kmi.txt & \
	txtmerge oth3d.txt oth3d.txt -b oth3dse.txt & \
	cd ..\$(SRC)

pet_mark.xbm: ../win/X11/pet_mark.xbm
	$(COPY) ..\win\X11\pet_mark.xbm pet_mark.xbm

rip.xpm: ../win/X11/rip.xpm
	$(COPY) ..\win\X11\rip.xpm rip.xpm

credit.xpm: ../dat/credit.xpm
	$(COPY) ..\dat\credit.xpm credit.xpm

tiletext.o:  $(CONFIG_H) $(INCL)\tile.h $(WSHR)\tiletext.c
	$(COPY) $(WSHR)\tiletext.c .
	$(CCOMPILE) $(CFLAGS) -o$@ tiletext.c

tiletxt.o: $(CONFIG_H)	$(INCL)\tile.h tilemap.c
	$(CCOMPILE) $(CFLAGS) -DTILETEXT -o$@ tilemap.c

#
#  Other Util Dependencies.
#

alloc.o: $(CONFIG_H)	 alloc.c
	$(CCOMPILE) $(CFLAGS) -oalloc.o alloc.c

drawing.o: $(CONFIG_H) drawing.c
	$(CCOMPILE) $(CFLAGS) -odrawing.o drawing.c

decl.o: $(CONFIG_H) decl.c
	$(CCOMPILE) $(CFLAGS) -odecl.o decl.c

monst.o: $(CONFIG_H)	     $(PERMONST_H)	$(ESHK_H)	   \
	$(EPRI_H)	      $(VAULT_H)	 $(INCL)\monsym.h   \
	$(INCL)\color.h	 monst.c
	$(CCOMPILE) $(CFLAGS) -omonst.o monst.c

objects.o: $(CONFIG_H)	      $(INCL)\obj.h	 $(INCL)\objclass.h \
	$(INCL)\prop.h	    $(INCL)\color.h    objects.c
	$(CCOMPILE) $(CFLAGS) -oobjects.o objects.c

panic.c:  $(UTIL)\panic.c
	$(COPY) $(UTIL)\panic.c .

panic.o:   $(CONFIG_H)	  panic.c

random.c: $(SSHR)\random.c
	$(COPY) $(SSHR)\random.c .

random.o: $(HACK_H) random.c
	$(CCOMPILE) $(CFLAGS) -orandom.o random.c

nhlan.c: $(SSHR)\nhlan.c
	$(COPY) $(SSHR)\nhlan.c .

nhlan.o: $(HACK_H) $(NHLAN_H) $(SSHR)\nhlan.c
	$(COPY) $(SSHR)\nhlan.c .
	$(CCOMPILE) $(CFLAGS) -o$@ nhlan.c

DATABASE = $(DAT)\data.base

dat.tag: $(DAT)\nhshare $(DAT)\nhushare $(CNF_SHARE_DATND)
	@echo dat done >dat.tag

$(DAT)\data:	 utility.tag	$(DATABASE)
	-makedefs -d

$(DAT)\rumors:	     utility.tag    $(DAT)\rumors.tru	$(DAT)\rumors.fal
	-makedefs -r

$(DAT)\quest.dat: utility.tag  $(DAT)\quest.txt
	-makedefs -q

$(DAT)\oracles:	     utility.tag    $(DAT)\oracles.txt
	-makedefs -h

sp_lev.tag: utility.tag     $(DAT)\beholder.des $(DAT)\bigroom.des \
	$(DAT)\blkmar.des   $(DAT)\castle.des   $(DAT)\caves.des \
	$(DAT)\dragons.des  $(DAT)\endgame.des \
	$(DAT)\gehennom.des $(DAT)\giants.des   $(DAT)\guild.des \
	$(DAT)\knox.des     $(DAT)\kobold-1.des $(DAT)\kobold-2.des \
	$(DAT)\lich.des     $(DAT)\mall-1.des   $(DAT)\mall-2.des \
	$(DAT)\medusa.des   $(DAT)\sokoban.des \
	$(DAT)\mines.des    $(DAT)\mtemple.des  $(DAT)\newmall.des \
	$(DAT)\nymph.des    $(DAT)\oracle.des   $(DAT)\rats.des \
	$(DAT)\sea.des      $(DAT)\spiders.des  $(DAT)\stor-1.des \
	$(DAT)\stor-2.des   $(DAT)\stor-3.des   $(DAT)\tomb.des \
	$(DAT)\tower.des    $(DAT)\yendor.des \
	$(DAT)\arch.des     $(DAT)\barb.des 	$(DAT)\caveman.des \
	$(DAT)\flame.des \
	$(DAT)\healer.des   $(DAT)\ice.des \
	$(DAT)\knight.des   $(DAT)\monk.des \
	$(DAT)\necro.des    $(DAT)\priest.des   $(DAT)\rogue.des \
	$(DAT)\samurai.des  $(DAT)\tourist.des  $(DAT)\slayer.des \
	$(DAT)\valkyrie.des $(DAT)\wizard.des   $(DAT)\yeoman.des \
	$(DAT)\frnknstn.des $(DAT)\nightmar.des $(DAT)\ranger.des 

	lev_comp $(DDAT)/beholder.des
	lev_comp $(DDAT)/bigroom.des
	lev_comp $(DDAT)/blkmar.des
	lev_comp $(DDAT)/castle.des
	lev_comp $(DDAT)/caves.des
#	lev_comp $(DDAT)/darkelf.des
	lev_comp $(DDAT)/dragons.des
	lev_comp $(DDAT)/endgame.des
	lev_comp $(DDAT)/gehennom.des
	lev_comp $(DDAT)/giants.des
	lev_comp $(DDAT)/guild.des
	lev_comp $(DDAT)/knox.des
	lev_comp $(DDAT)/kobold-1.des
	lev_comp $(DDAT)/kobold-2.des
	lev_comp $(DDAT)/lich.des
	lev_comp $(DDAT)/mall-1.des
	lev_comp $(DDAT)/mall-2.des
	lev_comp $(DDAT)/medusa.des
	lev_comp $(DDAT)/sokoban.des
	lev_comp $(DDAT)/mines.des
	lev_comp $(DDAT)/mtemple.des
	lev_comp $(DDAT)/newmall.des
	lev_comp $(DDAT)/nymph.des
	lev_comp $(DDAT)/oracle.des
	lev_comp $(DDAT)/rats.des
	lev_comp $(DDAT)/sea.des
	lev_comp $(DDAT)/spiders.des
	lev_comp $(DDAT)/stor-1.des
	lev_comp $(DDAT)/stor-2.des
	lev_comp $(DDAT)/stor-3.des
	lev_comp $(DDAT)/tomb.des
	lev_comp $(DDAT)/tower.des
	lev_comp $(DDAT)/yendor.des
	lev_comp $(DDAT)/arch.des
	lev_comp $(DDAT)/barb.des
	lev_comp $(DDAT)/caveman.des
#	lev_comp $(DDAT)/dopp.des
#	lev_comp $(DDAT)/elf.des
	lev_comp $(DDAT)/flame.des
#	lev_comp $(DDAT)/gnome.des
	lev_comp $(DDAT)/healer.des
	lev_comp $(DDAT)/ice.des
	lev_comp $(DDAT)/knight.des
#	lev_comp $(DDAT)/lycn.des
	lev_comp $(DDAT)/monk.des
	lev_comp $(DDAT)/necro.des
	lev_comp $(DDAT)/priest.des
	lev_comp $(DDAT)/rogue.des
	lev_comp $(DDAT)/samurai.des
	lev_comp $(DDAT)/tourist.des
	lev_comp $(DDAT)/slayer.des
	lev_comp $(DDAT)/valkyrie.des
	lev_comp $(DDAT)/wizard.des
	lev_comp $(DDAT)/yeoman.des
#	lev_comp $(DDAT)/hobbit.des
	lev_comp $(DDAT)/frnknstn.des
#	lev_comp $(DDAT)/dwarf.des
	lev_comp $(DDAT)/nightmar.des
	lev_comp $(DDAT)/ranger.des
	$(COPY) *.lev $(DAT)
	$(ECHO) sp_levs done > sp_lev.tag
	
$(DAT)\dungeon:	  utility.tag  $(DAT)\dungeon.def
	@copy $(SRC)\dgn_comp.exe $(DAT)\dgn_comp.exe
	-makedefs -e
	cd $(DAT) & dgn_comp dungeon.pdf & cd $(SRC)
#
# DLB stuff
#
$(DAT)\nhshare:	dlb_main.exe $(DAT)\data $(DAT)\rumors $(DAT)\dungeon \
	    $(DAT)\oracles $(DAT)\quest.dat sp_lev.tag
	$(ECHO) data >$(DAT)\dlb.lst
	$(ECHO) oracles >>$(DAT)\dlb.lst
ifeq ($(USE_GTK),Y)
	$(ECHO) guioptions >>$(DAT)\dlb.lst
else
	$(ECHO) ttyoptions >>$(DAT)\dlb.lst
endif
	$(ECHO) rumors >>$(DAT)\dlb.lst
	$(ECHO) help >>$(DAT)\dlb.lst
	$(ECHO) hh >>$(DAT)\dlb.lst
	$(ECHO) cmdhelp >>$(DAT)\dlb.lst
	$(ECHO) history >>$(DAT)\dlb.lst
	$(ECHO) opthelp >>$(DAT)\dlb.lst
	$(ECHO) wizhelp >>$(DAT)\dlb.lst
	$(ECHO) gypsy.txt >>$(DAT)\dlb.lst
	$(ECHO) license >>$(DAT)\dlb.lst
	cd $(DAT) & dlb_main cvIf dlb.lst nhshare & cd $(SRC)

$(DAT)\nhushare:	dlb_main.exe $(DAT)\dungeon $(DAT)\quest.dat sp_lev.tag
	$(ECHO) dungeon > $(DAT)\dlb2.lst
	$(ECHO) quest.dat >>$(DAT)\dlb2.lst
	cd $(DAT) & cd & \
	$(LS) *.lev >>dlb2.lst & \
	dlb_main cvIf dlb2.lst nhushare & \
	cd $(SRC)


dlb_main.exe: $(DLBOBJS)
	$(LINK) $(LFLAGS) -odlb_main.exe $(DLBOBJS)
	$(COPY) $@ $(DAT)\dlb_main.exe


dlb_main.o: $(UTIL)\dlb_main.c $(INCL)\config.h $(DLB_H)
	$(COPY) $(UTIL)\dlb_main.c .
	$(CCOMPILE) $(CFLAGS) -odlb_main.o dlb_main.c

# Game Dependencies

# sys/share
main.o:	 $(HACK_H) $(DLB_H) $(SSHR)\pcmain.c
	$(COPY) $(SSHR)\pcmain.c .
	$(CCOMPILE) $(CFLAGS) -o$@ pcmain.c

unix.o:	 $(HACK_H) $(SSHR)\pcunix.c
	$(COPY) $(SSHR)\pcunix.c .
	$(CCOMPILE) $(CFLAGS) -o$@ pcunix.c

sys.o : $(HACK_H) $(SSHR)\pcsys.c
	$(COPY) $(SSHR)\pcsys.c .
	$(CCOMPILE) $(CFLAGS) -o$@ pcsys.c

# sys/winnt
winnt.o : $(HACK_H)  $(WSYS)\winnt.c
	$(COPY) $(WSYS)\winnt.c .
	$(COPY) $(WSYS)\win32api.h ..\include
	$(CCOMPILE) $(CFLAGS) -o$@ winnt.c

nttty.o : $(HACK_H)  $(WSYS)\nttty.c
	$(COPY) $(WSYS)\nttty.c .
	$(CCOMPILE) $(CFLAGS) -o$@ nttty.c

ntsound.o: $(PCH) $(WSYS)\ntsound.c   $(HACK_H)
	$(COPY) $(WSYS)\ntsound.c .
	$(CCOMPILE) $(CFLAGS) -o$@ ntsound.c

mapimail.o: $(PCH) $(WSYS)\mapimail.c   $(HACK_H) $(NHLAN_H)
	$(COPY) $(WSYS)\mapimail.c .
	$(CCOMPILE) $(CFLAGS) -DMAPI_VERBOSE -o$@ mapimail.c


# win/tty
getline.o : $(HACK_H) $(INCL)\wintty.h $(WTTY)\getline.c
	$(COPY) $(WTTY)\getline.c .
	$(CCOMPILE) $(CFLAGS) -o$@ getline.c

termcap.o : $(CONFIG_H) $(WTTY)\termcap.c
	$(COPY) $(WTTY)\termcap.c .
	$(CCOMPILE) $(CFLAGS) -o$@ termcap.c

topl.o : $(CONFIG_H) $(WTTY)\topl.c
	$(COPY) $(WTTY)\topl.c .
	$(CCOMPILE) $(CFLAGS) -o$@ topl.c

wintty.o : $(HACK_H) $(WTTY)\wintty.c
	$(COPY) $(WTTY)\wintty.c .
	$(CCOMPILE) $(CFLAGS) -o$@ wintty.c

# win/gtk, win/gtk2
gtk.o: $(WGTK)/gtk.c ../include/winGTK.h $(HACK_H) ../include/func_tab.h \
		../include/dlb.h ../include/patchlevel.h
	$(COPY) $(WGTK)\gtk.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtk.c
gtkgetlin.o: $(WGTK)/gtkgetlin.c ../include/winGTK.h $(HACK_H)
	$(COPY) $(WGTK)\gtkgetlin.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtkgetlin.c
gtkstatus.o: $(WGTK)/gtkstatus.c ../include/winGTK.h $(HACK_H)
	$(COPY) $(WGTK)\gtkstatus.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtkstatus.c
gtkmenu.o: $(WGTK)/gtkmenu.c ../include/winGTK.h $(HACK_H)
	$(COPY) $(WGTK)\gtkmenu.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtkmenu.c
gtkyn.o: $(WGTK)/gtkyn.c ../include/winGTK.h $(HACK_H)
	$(COPY) $(WGTK)\gtkyn.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtkyn.c
gtkextcmd.o: $(WGTK)/gtkextcmd.c ../include/winGTK.h $(HACK_H) \
		../include/func_tab.h
	$(COPY) $(WGTK)\gtkextcmd.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtkextcmd.c
gtkmap.o: $(WGTK)/gtkmap.c ../include/winGTK.h $(HACK_H) ../include/dlb.h \
		../include/patchlevel.h
	$(COPY) $(WGTK)\gtkmap.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtkmap.c
gtkmessage.o: $(WGTK)/gtkmessage.c ../include/winGTK.h $(HACK_H)
	$(COPY) $(WGTK)\gtkmessage.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtkmessage.c
gtkmisc.o: $(WGTK)/gtkmisc.c ../include/winGTK.h $(HACK_H)
	$(COPY) $(WGTK)\gtkmisc.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtkmisc.c
xshmmap.o: $(WGTK)/xshmmap.c ../include/winGTK.h $(HACK_H) ../include/xshm.h
	$(COPY) $(WGTK)\xshmmap.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c xshmmap.c
xshm.o: $(WGTK)/xshm.c ../include/xshm.h
	$(COPY) $(WGTK)\xshm.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c xshm.c
gtktile.o: $(WGTK)/gtktile.c ../include/winGTK.h ../include/dlb.h
	$(COPY) $(WGTK)\gtktile.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtktile.c
gtkint.o: $(WGTK)/gtkint.c ../include/winGTK.h ../include/dlb.h \
		../include/patchlevel.h
	$(COPY) $(WGTK)\gtkint.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtkint.c
gtkext.o: $(WGTK)/gtkext.c ../include/winGTK.h ../include/prxyclnt.h \
		../include/dlb.h ../include/patchlevel.h
	$(COPY) $(WGTK)\gtkext.c .
	$(CCOMPILE) $(CFLAGS) $(WINGTKCFLAGS) -c gtkext.c
# win/proxy
winproxy.o: ../win/proxy/winproxy.c $(HACK_H) ../include/patchlevel.h \
		../include/date.h ../include/nhxdr.h ../include/proxycom.h \
		../include/winproxy.h
	$(COPY) ..\win\proxy\winproxy.c .
	$(CCOMPILE) $(CFLAGS) -c winproxy.c
nhext.o: ../win/proxy/nhext.c ../include/nhxdr.h ../include/proxycom.h
	$(COPY) ..\win\proxy\nhext.c .
	$(CCOMPILE) $(CFLAGS) -c nhext.c
nhxdr.o: ../win/proxy/nhxdr.c ../include/nhxdr.h
	$(COPY) ..\win\proxy\nhxdr.c .
	$(CCOMPILE) $(CFLAGS) -c nhxdr.c
nhextxdr.o: ../win/proxy/nhextxdr.c ../include/nhxdr.h
	$(COPY) ..\win\proxy\nhextxdr.c .
	$(CCOMPILE) $(CFLAGS) -c nhextxdr.c
nhextio.o: ../win/proxy/nhextio.c ../include/nhxdr.h
	$(COPY) ..\win\proxy\nhextio.c .
	$(CCOMPILE) $(CFLAGS) -c nhextio.c
compxdr.o: ../win/proxy/compxdr.c ../include/nhxdr.h ../include/proxycom.h
	$(COPY) ..\win\proxy\compxdr.c .
	$(CCOMPILE) $(CFLAGS) -c compxdr.c
dlbh.o: ../win/proxy/dlbh.c $(HACK_H) ../include/dlb.h
	$(COPY) ..\win\proxy\dlbh.c .
	$(CCOMPILE) $(CFLAGS) -c dlbh.c
mapid.o: ../win/proxy/mapid.c $(HACK_H) ../include/nhxdr.h \
		../include/winproxy.h
	$(COPY) ..\win\proxy\mapid.c .
	$(CCOMPILE) $(CFLAGS) -c mapid.c
riputil.o: ../win/proxy/riputil.c $(HACK_H)
	$(COPY) ..\win\proxy\riputil.c .
	$(CCOMPILE) $(CFLAGS) -c riputil.c
glyphmap.o: ../win/proxy/glyphmap.c $(HACK_H) ../include/nhxdr.h \
		../include/proxycom.h ../include/winproxy.h
	$(COPY) ..\win\proxy\glyphmap.c .
	$(CCOMPILE) $(CFLAGS) -c glyphmap.c
getopt.o: ../win/proxy/getopt.c $(HACK_H)
	$(COPY) ..\win\proxy\getopt.c .
	$(CCOMPILE) $(CFLAGS) -c getopt.c
callback.o: ../win/proxy/callback.c $(HACK_H) ../include/nhxdr.h \
		../include/proxycom.h ../include/winproxy.h
	$(COPY) ..\win\proxy\callback.c .
	$(CCOMPILE) $(CFLAGS) -c callback.c
proxysvc.o: ../win/proxy/proxysvc.c ../include/nhxdr.h \
		../include/proxycom.h ../include/prxyclnt.h
	$(COPY) ..\win\proxy\proxysvc.c .
	$(CCOMPILE) $(CFLAGS) -c proxysvc.c
proxycb.o: ../win/proxy/proxycb.c ../include/nhxdr.h ../include/proxycom.h \
		../include/proxycb.h
	$(COPY) ..\win\proxy\proxycb.c .
	$(CCOMPILE) $(CFLAGS) -c proxycb.c
prxymap.o: ../win/proxy/prxymap.c ../include/nhxdr.h ../include/proxycom.h \
		../include/prxyclnt.h
	$(COPY) ..\win\proxy\prxymap.c .
	$(CCOMPILE) $(CFLAGS) -c prxymap.c
prxychar.o: ../win/proxy/prxychar.c ../include/nhxdr.h ../include/proxycom.h \
		../include/prxyclnt.h
	$(COPY) ..\win\proxy\prxychar.c .
	$(CCOMPILE) $(CFLAGS) -c prxychar.c
prxytile.o: ../win/proxy/prxytile.c ../include/nhxdr.h ../include/proxycom.h \
		../include/prxyclnt.h
	$(COPY) ..\win\proxy\prxytile.c .
	$(CCOMPILE) $(CFLAGS) -c prxytile.c
prxyconn.o: ../win/proxy/prxyconn.c ../include/nhxdr.h ../include/proxycom.h \
		../include/prxyclnt.h
	$(COPY) ..\win\proxy\prxyconn.c .
	$(CCOMPILE) $(CFLAGS) -c prxyconn.c

# src dependencies
allmain.o:  $(HACK_H)
alloc.o:    $(CONFIG_H)
apply.o:    $(HACK_H) $(INCL)\edog.h
artifact.o: $(HACK_H) $(INCL)\artifact.h $(INCL)\artilist.h
attrib.o:   $(HACK_H) $(INCL)\artifact.h
ball.o:	    $(HACK_H)
bones.o:    $(HACK_H) $(INCL)\lev.h
botl.o:	    $(HACK_H)
cmd.o:	    $(HACK_H) $(INCL)\func_tab.h
dbridge.o:  $(HACK_H)
decl.o:	    $(HACK_H) $(INCL)\quest.h
detect.o:   $(HACK_H) $(INCL)\artifact.h
dig.o:      $(HACK_H)
display.o:  $(HACK_H)
dlb.o:      $(HACK_H) $(DLB_H)
do.o:	    $(HACK_H) $(INCL)\lev.h
do_name.o:  $(HACK_H)
do_wear.o:  $(HACK_H)
dog.o:	    $(HACK_H) $(INCL)\edog.h
dogmove.o:  $(HACK_H) $(INCL)\mfndpos.h $(INCL)\edog.h
dokick.o:   $(HACK_H) $(ESHK_H)
dothrow.o:  $(HACK_H)
drawing.o:  $(HACK_H) $(INCL)\tcap.h
dungeon.o:  $(HACK_H) $(INCL)\dgn_file.h
eat.o:	    $(HACK_H)
end.o:	    $(HACK_H) $(ESHK_H)
engrave.o:  $(HACK_H) $(INCL)\lev.h
exper.o:    $(HACK_H)
explode.o:  $(HACK_H)
extralev.o:  $(HACK_H)
files.o:     $(HACK_H)
fountain.o:  $(HACK_H)
gypsy.o:     $(HACK_H)
hack.o:	     $(HACK_H)
hacklib.o:   $(HACK_H)
invent.o:    $(HACK_H) $(INCL)\artifact.h
light.o:     $(HACK_H) $(INCL)\lev.h
lock.o:	     $(HACK_H)
mail.o:	     $(HACK_H) $(INCL)\mail.h
makemon.o:   $(HACK_H) $(EPRI_H) $(EMIN_H) $(INCL)\edog.h
mapglyph.o:  $(HACK_H)
mcastu.o:    $(HACK_H)
mhitm.o:     $(HACK_H) $(INCL)\artifact.h $(INCL)\edog.h
mhitu.o:     $(HACK_H) $(INCL)\artifact.h $(INCL)\edog.h
minion.o:    $(HACK_H) $(EMIN_H) $(EPRI_H)
mklev.o:     $(HACK_H)
mkmap.o:     $(HACK_H) $(INCL)\sp_lev.h
mkmaze.o:    $(HACK_H) $(INCL)\sp_lev.h
mkobj.o:     $(HACK_H) $(INCL)\artifact.h $(INCL)\prop.h
mkroom.o:    $(HACK_H)
mon.o:	     $(HACK_H) $(INCL)\mfndpos.h $(INCL)\edog.h
mondata.o:   $(HACK_H) $(ESHK_H) $(EPRI_H)
monmove.o:   $(HACK_H) $(INCL)\mfndpos.h $(INCL)\artifact.h
monst.o:     $(CONFIG_H) $(PERM_H) $(ESHK_H) $(EPRI_H) \
	  $(INCL)\color.h $(INCL)\monsym.h $(INCL)\vault.h
mplayer.o:   $(HACK_H)
mthrowu.o:   $(HACK_H)
muse.o:	     $(HACK_H)
music.o:     $(HACK_H)
o_init.o:    $(HACK_H)
objects.o:   $(CONFIG_H) $(INCL)\obj.h $(INCL)\objclass.h \
	       $(INCL)\prop.h $(SKILLS_H) $(INCL)\color.h
objnam.o:    $(HACK_H)
options.o:   $(CONFIG_H) $(HACK_H) $(INCL)\objclass.h $(INCL)\flag.h \
	      $(INCL)\tcap.h
pager.o:     $(HACK_H)
pickup.o:    $(HACK_H)
pline.o:     $(HACK_H) $(EPRI_H)
polyself.o:  $(HACK_H)
potion.o:    $(HACK_H)
pray.o:	     $(HACK_H) $(EPRI_H)
priest.o:    $(HACK_H) $(INCL)\mfndpos.h $(ESHK_H) $(EPRI_H) $(EMIN_H)
quest.o:     $(HACK_H) $(INCL)\quest.h $(INCL)\qtext.h
questpgr.o:  $(HACK_H) $(INCL)\qtext.h
read.o:	     $(HACK_H)
rect.o:	     $(HACK_H)
region.o:    $(HACK_H)
restore.o:   $(HACK_H) $(INCL)\lev.h $(INCL)\tcap.h $(INCL)\quest.h
rip.o:	     $(HACK_H)
role.o:	     $(HACK_H)
rnd.o:	     $(HACK_H)
rumors.o:    $(HACK_H)
save.o:	     $(HACK_H) $(INCL)\lev.h $(INCL)\quest.h
shk.o:	     $(HACK_H) $(ESHK_H)
shknam.o:    $(HACK_H) $(ESHK_H)
sit.o:	     $(HACK_H) $(INCL)\artifact.h
sounds.o:    $(HACK_H) $(INCL)\edog.h
sp_lev.o:    $(HACK_H) $(INCL)\sp_lev.h $(INCL)\align.h $(INCL)\rect.h
spell.o:     $(HACK_H)
steal.o:     $(HACK_H)
steed.o:     $(HACK_H)
teleport.o:  $(HACK_H)
tech.o:	     $(HACK_H) $(INCL)\tech.h
tile.o:	     $(HACK_H) $(TILE_H)
timeout.o:   $(HACK_H)
topten.o:    $(HACK_H)
track.o:     $(HACK_H)
trap.o:	     $(HACK_H)
u_init.o:    $(HACK_H)
uhitm.o:     $(HACK_H)
vault.o:     $(HACK_H) $(INCL)\vault.h
version.o:   $(HACK_H) $(INCL)\patchlevel.h
vision.o:    $(HACK_H) $(INCL)\vis_tab.h
weapon.o:    $(HACK_H)
were.o:	     $(HACK_H)
wield.o:     $(HACK_H)
windows.o:   $(HACK_H) $(INCL)\wintty.h
wizard.o:    $(HACK_H) $(INCL)\qtext.h
worm.o:	     $(HACK_H) $(INCL)\lev.h
worn.o:	     $(HACK_H)
write.o:     $(HACK_H)
zap.o:	     $(HACK_H)

# end of file
