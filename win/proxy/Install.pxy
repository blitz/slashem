The proxy window interface allows the game to be built with support
for external window interfaces. These have many advantages over
internal interfaces: they can be added later by groups other than
the dev-team with no need for changes to the game source; they can
run in seperate processes and even on seperate machines; they can
run as different users (which avoids security problems when the
game is run as setuid or setgid).

External window interfaces are not without their disadvantages.
There is an overhead associated with the NhExt protocol and more
information needs to be shared (since less can be assumed). This
takes time to do, especially during startup.

The following configurations currently exist:

CLIENT/SERVER

In this configuration the game itself is configured as a proxy
client. Typically just two windowing systems will be installed in the
main executable - tty and proxy. The tty interface should be the
default windowing system.

Each windowing system which needs to be supported is then supplied
as a server.

The client and server consist of the following systems:

Client:
	WINPROXY	Client side proxy support
	PROXYCOM	Common proxy support
	PROXYUTL	Interfaces between proxy and the game
	NHWIN		Tile support
	WINTTY		TTY window interface
	HACK		The game core

Server:
	WINDOW		The window interface (eg., GTK 2.0)
	NHPROXY		Server side proxy support

To build:
	1. Configure toplevel Makefile for proxy use (CNF_SHARE_DATND)
	2. Configure config.h as follows:
		Comment out GTK_GRAPHICS
		Define PROXY_GRAPHICS, but not PROXY_INTERNAL
		Define GTK_V20 and GTK_PROXY inside
		  #ifdef GTK_GRAPHICS ... #endif
	3. Configure src/Makefile for proxy use
	   (WINSRC, WINOBJ, WINLIB)
	4. Build game by "make all", "make install" as normal
	5. Build proxy library by "make nhproxy.a" in src
	6. Build gtkhack by "make -f Makefile.unx all" in win/gtk2
	   (Replace Makefile.unx with the appropriate makefile
	    for your platform.)

SINGLE EXECUTABLE

This configuration uses dual processes (which has the advantage of
allowing the windowing interface to run without elevated privileges -
necessary for GTK).  It is somewhat simpler than the client/server
configuration but is much less flexible.

Build not yet supported.
